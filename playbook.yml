---

- name: Pre-reqs for ansible to run
  hosts: all
  gather_facts: false
  become: yes
  pre_tasks:
    - raw: test -e /usr/bin/python || ( yum -y update && yum install -y python-minimal )

- name: Build Data Ingest Linux Server.
  hosts: all
  become: yes
  tasks:
    - yum: name=gcc
    - yum: name=pcre-devel
    - yum: name=openssl-devel
    - yum: name=zlib-devel
    - yum: name=wget
    - yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
    - yum: name=python-pip
    - yum: name=epel-release
    - yum: name=python34
    - yum: name=clamav state=latest
    - yum: name=git
    - yum: name=cloud-utils
    - pip: name=virtualenv
    - pip: name=virtualenvwrapper
    - pip: name=AWSCLI

    - name: Make directory structure
      file:
        path: /{{ item }}
        state: directory
        mode: 0775
        recurse: yes
      with_items:
        - appdata
        - appdata/ADT
        - appdata/ADT/archive
        - appdata/ADT/archive/07032016acl
        - appdata/ADT/archive/07032016oag
        - appdata/ADT/archive/acl
        - appdata/ADT/archive/mvt
        - appdata/ADT/archive/oag
        - appdata/ADT/data
        - appdata/ADT/data/07032016acl
        - appdata/ADT/data/07032016oag
        - appdata/ADT/data/acl
        - appdata/ADT/data/mvt
        - appdata/ADT/data/oag
        - appdata/ADT/quarantine
        - appdata/ADT/quarantine/acl
        - appdata/ADT/quarantine/mvt
        - appdata/ADT/quarantine/oag
        - appdata/ADT/scripts
        - appdata/ADT/stage
        - appdata/ADT/stage/acl
        - appdata/ADT/stage/maytech
        - appdata/ADT/stage/mvt
        - appdata/ADT/stage/oag
        - appdata/EF
        - appdata/EF/data
        - appdata/EF/data/drt
        - appdata/EF/keys
        - appdata/EF/log
        - appdata/EF/scripts
        - appdata/NATS
        - appdata/NATS/archive
        - appdata/NATS/archive/nats
        - appdata/NATS/data
        - appdata/NATS/data/nats
        - appdata/NATS/log
        - appdata/NATS/quarantine
        - appdata/NATS/quarantine/nats
        - appdata/NATS/scripts
        - appdata/NATS/stage
        - appdata/NATS/stage/maytech
        - appdata/NATS/stage/nats

    - name: Download Data Transfer from GitHub
      shell: "{{ item }}"
      args:
        chdir: /lib
      with_items:
        - test -e /lib/data-transfer || git clone https://github.com/UKHomeOffice/data-transfer
        - python3 -m venv ~/.virtualenvs/data-transfer
        - source ~/.virtualenvs/data-transfer/bin/activate

    - name: Install Data Transfer dependencies
      shell: pip install -e . -r requirements.txt
      args:
        chdir: /lib/data-transfer

    - name: Export data-transfer path
      shell: export PYTHONPATH=.
      args:
        chdir: /lib/data-transfer

#    @TODO: update object path
    - name: GET Data Transfer config from S3 to localhost
      aws_s3:
        bucket: dq-config-bucket
        object: /dq-data-ingest-server/data_transfer.bat.zip
        dest: /tmp/data_transfer.bat.zip
        mode: get
      delegate_to: 127.0.0.1

    - name: Copy Data Transfer config
      copy:
        src: /tmp/data_transfer.bat.zip
        dest: /lib/data-transfer
        mode: 0755

    - name: Unzip Data Transfer config
      unarchive:
        src: /lib/data-transfer/data_transfer.bat.zip
        dest: /lib

    - name: Download cloudwatch logs agent
      get_url:
        url: https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
        dest: /tmp/awslogs-agent-setup.py
        mode: "+x"

    - name: Cloudwatch logs config
      copy:
        dest: /tmp/cwlogs.conf
        content: |
          [general]
          state_file = /var/awslogs/state/agent-state
          [/var/log/messages]
          file = /var/log/messages
          log_group_name = /dataingest/linux
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S

    - name: Install cloudwatch log agent
      environment:
        LC_ALL: C
      shell: /tmp/awslogs-agent-setup.py --region eu-west-2 --non-interactive -c /tmp/cwlogs.conf
      args:
        creates: /var/awslogs/etc/aws.conf

    - name: Copy cloudwatch logs starter
      copy:
        src: startcloudwatchlogs.sh
        dest: /usr/bin/startcloudwatchlogs.sh
        owner: root
        group: root
        mode: 0755

    - name: Make Cron Job to start awslogs with right region
      cron:
        name: Start awslogs
        special_time: reboot
        job: /usr/bin/startcloudwatchlogs.sh