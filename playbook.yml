---

- name: Pre-reqs for ansible to run
  hosts: all
  gather_facts: false
  become: yes
  pre_tasks:
    - raw: test -e /usr/bin/python || ( yum -y update && yum install -y python-minimal )

- name: Build Data Ingest Linux Server.
  hosts: all
  become: yes
  tasks:
  - name: Make directory structure
    file:
      path: /{{ item }}
      state: directory
      mode: 0775
      recurse: yes
    with_items:
      - ADT
      - EF
      - NATS
      - appdata
      - appdata/ADT
      - appdata/ADT/archive
      - appdata/ADT/archive/07032016acl
      - appdata/ADT/archive/07032016oag
      - appdata/ADT/archive/acl
      - appdata/ADT/archive/mvt
      - appdata/ADT/archive/oag
      - appdata/ADT/data
      - appdata/ADT/data/07032016acl
      - appdata/ADT/data/07032016oag
      - appdata/ADT/data/acl
      - appdata/ADT/data/mvt
      - appdata/ADT/data/oag
      - appdata/ADT/quarantine
      - appdata/ADT/quarantine/acl
      - appdata/ADT/quarantine/mvt
      - appdata/ADT/quarantine/oag
      - appdata/ADT/scripts
      - appdata/ADT/stage
      - appdata/ADT/stage/acl
      - appdata/ADT/stage/maytech
      - appdata/ADT/stage/mvt
      - appdata/ADT/stage/oag
      - appdata/EF
      - appdata/EF/data
      - appdata/EF/data/drt
      - appdata/EF/keys
      - appdata/EF/log
      - appdata/EF/scripts
      - appdata/NATS
      - appdata/NATS/archive
      - appdata/NATS/archive/nats
      - appdata/NATS/data
      - appdata/NATS/data/nats
      - appdata/NATS/data/ga
      - appdata/NATS/log
      - appdata/NATS/quarantine
      - appdata/NATS/quarantine/nats
      - appdata/NATS/scripts
      - appdata/NATS/stage
      - appdata/NATS/stage/maytech
      - appdata/NATS/stage/nats

  - file:
      src: /appdata/ADT
      dest: /ADT
      force: yes
      state: link

  - file:
      src: /appdata/EF
      dest: /EF
      force: yes
      state: link

  - file:
      src: /appdata/NATS
      dest: /NATS
      force: yes
      state: link

  - name: SSM Group
    group:
      name: SSM
      system: yes

  - name: Create wherescape user
    user:
      name: wherescape
      group: SSM

  - name: Yum Install Dependencies
    yum: name={{ item }}
    with_items:
      - epel-release
      - python-pip
      - gcc
      - pcre-devel
      - openssl-devel
      - zlib-devel
      - wget
      - git
      - cloud-utils
      - nodejs

  - name: Pip Install Dependencies
    pip: 'name={{ item }}'
    with_items:
      - virtualenv
      - AWSCLI
      - ftputil

  - name: Install Python 2.7
    unarchive:
     src: https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz
     dest: /usr/src
     remote_src: yes

  - name: Configure Python 2.7
    shell: ./configure
    args:
      chdir: /usr/src/Python-2.7.10
    creates: /usr/src/Python-2.7.10/Modules

  - name: GET config files from DQ-config-bucket
    shell: '{{ item }}'
    with_items:
      - aws configure set aws_access_key_id '{{user_access_key}}'
      - aws configure set aws_secret_access_key '{{secret_access_key}}'
      - aws s3 cp s3://dq-config-bucket/dq-data-ingest-linux-server/ /tmp/install/ --recursive

  - name: Install Postgresql 9.6
    shell: '{{ item }}'
    with_items:
      - rpm -ivh https://yum.postgresql.org/9.6/redhat/rhel-7.3-x86_64/pgdg-centos96-9.6-3.noarch.rpm
      - yum update -y
      - yum install -y postgresql96

  - name: ClamAV Install Packages
    shell: '{{ item }}'
    with_items:
      - yum -y install clamav-server clamav-data clamav-update clamav-filesystem clamav clamav-scanner-systemd clamav-devel clamav-lib clamav-server-systemd

  - name: ClamAV SELinux configuration
    shell: '{{ item }}'
    with_items:
      - setenforce 0
      - setsebool -P antivirus_can_scan_system 1
      - setsebool -P clamd_use_jit 0

  - name: ClamAV Configuration
    copy:
      src: '/tmp/install/scan.conf'
      dest: '{{ item }}'
      remote_src: yes
      force: yes
      with_items:
        - /etc/clamd.d/scan.conf
        - /etc/clamd.d/scan.conf.backup
        - /etc/clamd.conf

#      - sed -i -e "s/^Example/#Example/" /etc/clamd.d/scan.conf
#      - cp /usr/share/clamav/template/existing clamd.conf /etc/clamd.d/clamd.conf
#      - chmod -u wherescape 755 /var/lib/clamav/
#      - name: Add Wherescape to virusgroup
#      - usermod -g virusgroup wherescape
#      - name: Add Wherescape to /var/run/

  - name: Freshclam Configuration Files
    copy:
      src: '{{ item.source }}'
      dest: '{{ item.dest }}'
    with_items:
      - { source: /etc/freshclam.conf, dest: /etc/freshclam.conf.bakup }
      - { source: /tmp/install/freshclam.service, dest: /usr/lib/systemd/system/freshclam.service }

  - name: Freshclam Additional Configuration
    shell: '{{ item }}'
    with_items:
      - sed -i -e "s/^Example/#Example/" /etc/freshclam.conf
      - freshclam

  - name: Cron Freshclam
    cron:
      user: wherescape
      minute: "0"
      hour: "01,13"
      day: "*"
      job: "/usr/bin/freshclam --quiet"

  - service:
      name: Service Freshclam ClamAV
      pattern: '{{ item.pattern }}'
      state: '{{ item.state }}'
      with_items:
        - { pattern: '/lib/systemd/system/freshclam.service', state: started }
        - { pattern: '/lib/systemd/system/freshclam.service', state: enabled }
        - { pattern: '/lib/systemd/system/clamd@scan.service', state: started }
        - { pattern: '/lib/systemd/system/clamd@scan.service', state: enabled }

  - name: Install Data Transfer
    pip: 'name=data-transfer'

  - name: Install Data Transfer Dependencies
    npm:
      name: pm2
      global: yes

  - name: Clone script repos from Github
    git:
      repo: '{{ item.repo }}'
      dest: '{{ item.dest }}'
      clone: yes
      update: no
    with_items:
      - { repo: 'https://github.com/UKHomeOffice/dq_sftp-nats-dmz/', dest: '/opt/dq_sftp-nats-dmz' }
      - { repo: 'https://github.com/UKHomeOffice/dq-ssm_ingest/', dest: '/opt/dq-ssm_ingest' }

  - name: Symlink script files in opt
    file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: yes
      state: link
    with_items:
      - { src: '/opt/dq_sftp-nats-dmz/NATS/scripts/', dest: '/appdata/NATS/scripts'}
      - { src: '/opt/dq-ssm_ingest/ADT/WEB_Server/', dest: '/appdata/ADT/scripts'}

  - name: '{{ item.name }}'
    cron:
      user: '{{ item.user }}'
      minute: '{{ item.minute }}'
      hour: '{{ item.hour }}'
      day: '{{ item.day }}'
      job: '{{ item.job }}'
    with_items:
        - { name: Cron sftp_nats_client_maytech.py, user: wherescape, minute: "*/1",  hour: "*", day: "*",  job: "cd /NATS/scripts && ./check_run.sh ./sftp_nats_client_maytech.py > /dev/null 2> /dev/null" }
        - { name: Cron nats_house_keeping, user: wherescape, minute: "*/45",  hour: "*", day: "*", job: "/NATS/scripts/nats_house_keeping.sh > /dev/null 2> /dev/null" }
        - { name: Cron ftp_acl_web02.py, user: wherescape, minute: "*/10",  hour: "0", day: "*",  job: "/ADT/scripts/ftp_acl_web02.py" }

  - name: Set DNS Resolver Options
    blockinfile:
      path: /etc/sysconfig/network
      block: |
        RES_OPTIONS="rotate timeout:1 attempts:1"
